// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PostexS.Models.Data;

namespace TasahelExpress.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250326145856_AddClientCodeToOrderTable")]
    partial class AddClientCodeToOrderTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PostexS.Models.Domain.Branch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Whatsapp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("PostexS.Models.Domain.ContactUs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FaceBook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instgram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsApp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("PostexS.Models.Domain.DeviceTokens", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DeviceTokens");
                });

            modelBuilder.Entity("PostexS.Models.Domain.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("PostexS.Models.Domain.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PostexS.Models.Domain.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ArrivedCost")
                        .HasColumnType("float");

                    b.Property<byte[]>("BarcodeImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("ClientCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ClientCost")
                        .HasColumnType("float");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CompletedId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("DeliveryCost")
                        .HasColumnType("float");

                    b.Property<double>("DeliveryFees")
                        .HasColumnType("float");

                    b.Property<string>("DeliveryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderCompleted")
                        .HasColumnType("int");

                    b.Property<long?>("OrderOperationHistoryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<bool>("PendingReturnTransferrConfirmed")
                        .HasColumnType("bit");

                    b.Property<long?>("PreviousBranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReturnedCompletedId")
                        .HasColumnType("bigint");

                    b.Property<double?>("ReturnedCost")
                        .HasColumnType("float");

                    b.Property<bool>("ReturnedFinished")
                        .HasColumnType("bit");

                    b.Property<int>("ReturnedOrderCompleted")
                        .HasColumnType("int");

                    b.Property<long?>("ReturnedWalletId")
                        .HasColumnType("bigint");

                    b.Property<string>("Returned_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.Property<bool>("TransferredConfirmed")
                        .HasColumnType("bit");

                    b.Property<long?>("WalletId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("OrderOperationHistoryId");

                    b.HasIndex("PreviousBranchId");

                    b.HasIndex("WalletId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PostexS.Models.Domain.OrderNotes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderNotes");
                });

            modelBuilder.Entity("PostexS.Models.Domain.OrderOperationHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AcceptDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AcceptTransferDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AcceptTransferReturnedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AcceptTransferReturned_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AcceptTransfer_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Accept_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Assign_To_DriverDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Assign_To_Driver_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Complete_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Create_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Delete_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EditCompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditComplete_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Edit_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Finish_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RejectDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reject_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RestoreDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Restore_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReturnedCompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReturnedComplete_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReturnedFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReturnedFinish_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TransferReturnedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransferReturned_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Transfer_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AcceptTransferReturned_UserId");

                    b.HasIndex("AcceptTransfer_UserId");

                    b.HasIndex("Accept_UserId");

                    b.HasIndex("Assign_To_Driver_UserId");

                    b.HasIndex("Complete_UserId");

                    b.HasIndex("Create_UserId");

                    b.HasIndex("Delete_UserId");

                    b.HasIndex("EditComplete_UserId");

                    b.HasIndex("Edit_UserId");

                    b.HasIndex("Finish_UserId");

                    b.HasIndex("OrderId");

                    b.HasIndex("Reject_UserId");

                    b.HasIndex("Restore_UserId");

                    b.HasIndex("ReturnedComplete_UserId");

                    b.HasIndex("ReturnedFinish_UserId");

                    b.HasIndex("TransferReturned_UserId");

                    b.HasIndex("Transfer_UserId");

                    b.ToTable("OrdersOperationsHistories");
                });

            modelBuilder.Entity("PostexS.Models.Domain.OrderTransferrHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AcceptTransferDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AcceptTransfer_UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("FromBranchId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PreviousBranchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToBranchId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TransferCancel")
                        .HasColumnType("bit");

                    b.Property<string>("Transfer_UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderTransferrHistories");
                });

            modelBuilder.Entity("PostexS.Models.Domain.TermsAndCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Arabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("English")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TermsAndConditions");
                });

            modelBuilder.Entity("PostexS.Models.Domain.Wallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActualUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AddedToAdminWallet")
                        .HasColumnType("bit");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Complete_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OrderNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("UserWalletLast")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ActualUserId");

                    b.HasIndex("Complete_UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("PostexS.Models.Domain.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime?>("APIkeys_UpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<double?>("DeliveryCost")
                        .HasColumnType("float");

                    b.Property<string>("FishPhotoPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityBackPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityFrontPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrdersGeneralNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RidingLecencePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Tracking")
                        .HasColumnType("bit");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("ViecleLecencePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Wallet")
                        .HasColumnType("float");

                    b.Property<string>("WhatsappPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("BranchId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostexS.Models.Domain.DeviceTokens", b =>
                {
                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PostexS.Models.Domain.Location", b =>
                {
                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "Delivery")
                        .WithMany()
                        .HasForeignKey("DeliveryId");

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("PostexS.Models.Domain.Notification", b =>
                {
                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PostexS.Models.Domain.Order", b =>
                {
                    b.HasOne("PostexS.Models.Domain.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "Client")
                        .WithMany("Clients")
                        .HasForeignKey("ClientId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "Delivery")
                        .WithMany("Deliveries")
                        .HasForeignKey("DeliveryId");

                    b.HasOne("PostexS.Models.Domain.OrderOperationHistory", "OrderOperationHistory")
                        .WithMany()
                        .HasForeignKey("OrderOperationHistoryId");

                    b.HasOne("PostexS.Models.Domain.Branch", "PreviousBranch")
                        .WithMany()
                        .HasForeignKey("PreviousBranchId");

                    b.HasOne("PostexS.Models.Domain.Wallet", "Wallet")
                        .WithMany("Orders")
                        .HasForeignKey("WalletId");

                    b.Navigation("Branch");

                    b.Navigation("Client");

                    b.Navigation("Delivery");

                    b.Navigation("OrderOperationHistory");

                    b.Navigation("PreviousBranch");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("PostexS.Models.Domain.OrderNotes", b =>
                {
                    b.HasOne("PostexS.Models.Domain.Order", "Order")
                        .WithMany("OrderNotes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "User")
                        .WithMany("UserOrderNotes")
                        .HasForeignKey("UserId");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PostexS.Models.Domain.OrderOperationHistory", b =>
                {
                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "AcceptTransferReturned_User")
                        .WithMany()
                        .HasForeignKey("AcceptTransferReturned_UserId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "AcceptTransfer_User")
                        .WithMany()
                        .HasForeignKey("AcceptTransfer_UserId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "Accept_User")
                        .WithMany()
                        .HasForeignKey("Accept_UserId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "Assign_To_Driver_User")
                        .WithMany()
                        .HasForeignKey("Assign_To_Driver_UserId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "Complete_User")
                        .WithMany()
                        .HasForeignKey("Complete_UserId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "Create_User")
                        .WithMany()
                        .HasForeignKey("Create_UserId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "Delete_User")
                        .WithMany()
                        .HasForeignKey("Delete_UserId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "EditComplete_User")
                        .WithMany()
                        .HasForeignKey("EditComplete_UserId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "Edit_User")
                        .WithMany()
                        .HasForeignKey("Edit_UserId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "Finish_User")
                        .WithMany()
                        .HasForeignKey("Finish_UserId");

                    b.HasOne("PostexS.Models.Domain.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "Reject_User")
                        .WithMany()
                        .HasForeignKey("Reject_UserId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "Restore_User")
                        .WithMany()
                        .HasForeignKey("Restore_UserId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "ReturnedComplete_User")
                        .WithMany()
                        .HasForeignKey("ReturnedComplete_UserId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "ReturnedFinish_User")
                        .WithMany()
                        .HasForeignKey("ReturnedFinish_UserId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "TransferReturned_User")
                        .WithMany()
                        .HasForeignKey("TransferReturned_UserId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "Transfer_User")
                        .WithMany()
                        .HasForeignKey("Transfer_UserId");

                    b.Navigation("Accept_User");

                    b.Navigation("AcceptTransfer_User");

                    b.Navigation("AcceptTransferReturned_User");

                    b.Navigation("Assign_To_Driver_User");

                    b.Navigation("Complete_User");

                    b.Navigation("Create_User");

                    b.Navigation("Delete_User");

                    b.Navigation("Edit_User");

                    b.Navigation("EditComplete_User");

                    b.Navigation("Finish_User");

                    b.Navigation("Order");

                    b.Navigation("Reject_User");

                    b.Navigation("Restore_User");

                    b.Navigation("ReturnedComplete_User");

                    b.Navigation("ReturnedFinish_User");

                    b.Navigation("Transfer_User");

                    b.Navigation("TransferReturned_User");
                });

            modelBuilder.Entity("PostexS.Models.Domain.OrderTransferrHistory", b =>
                {
                    b.HasOne("PostexS.Models.Domain.Order", null)
                        .WithMany("OrderTransferrHistories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostexS.Models.Domain.Wallet", b =>
                {
                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "ActualUser")
                        .WithMany("ActualUser")
                        .HasForeignKey("ActualUserId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "Complete_User")
                        .WithMany()
                        .HasForeignKey("Complete_UserId");

                    b.HasOne("PostexS.Models.Domain.ApplicationUser", "User")
                        .WithMany("WalletClient")
                        .HasForeignKey("UserId");

                    b.Navigation("ActualUser");

                    b.Navigation("Complete_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PostexS.Models.Domain.ApplicationUser", b =>
                {
                    b.HasOne("PostexS.Models.Domain.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("PostexS.Models.Domain.Order", b =>
                {
                    b.Navigation("OrderNotes");

                    b.Navigation("OrderTransferrHistories");
                });

            modelBuilder.Entity("PostexS.Models.Domain.Wallet", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PostexS.Models.Domain.ApplicationUser", b =>
                {
                    b.Navigation("ActualUser");

                    b.Navigation("Clients");

                    b.Navigation("Deliveries");

                    b.Navigation("UserOrderNotes");

                    b.Navigation("WalletClient");
                });
#pragma warning restore 612, 618
        }
    }
}
